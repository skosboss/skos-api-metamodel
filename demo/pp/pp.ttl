@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix hydra: <http://www.w3.org/ns/hydra/core#> .
@prefix hydra-ext: <http://skos-api.org/hydra-extended#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix pp: <http://someapivendor.com/api/> .
@prefix skos-api: <http://skos-api.org/metamodel#> .

pp:BadRequest a hydra:Status ;
  hydra:code "400" ;
  hydra:description "Bad request" ;
.

pp:doc a hydra:ApiDocumentation ;
  hydra:entrypoint pp:api ;
.

pp:EntryPoint a hydra:Class ;
  hydra:supportedProperty
    [
      hydra:property pp:createConceptScheme ;
      hydra:title "Create concept scheme" ;
      hydra:readable false ;
      hydra:writable true ;
    ] ,
    [
      hydra:property pp:getConceptSchemes ;
      hydra:title "Get concept schemes" ;
      hydra:readable true ;
      hydra:writable false ;
    ] ,
    [
      hydra:property pp:getTopConcepts ;
      hydra:title "Get top concept" ;
      hydra:readable true ;
      hydra:writable false ;
    ] ,
    [
      hydra:property pp:getChildConcepts ;
      hydra:title "Get child concepts" ;
      hydra:readable true ;
      hydra:writable false ;
    ] ,
      #TODO
      #pp:getSubTree ,
      #pp:deleteConceptScheme ,
    [
      hydra:property pp:createTopConcept ;
      hydra:title "Create top concept" ;
      hydra:readable false ;
      hydra:writable true ;
    ] ,
    [
      hydra:property pp:createConcept ;
      hydra:title "Create concept" ;
      hydra:readable false ;
      hydra:writable true ;
    ] , 
    [
      hydra:property pp:getCompleteConcept ;
      hydra:title "Get complete concept" ;
      hydra:readable true ;
      hydra:writable false ;
    ] ,
    [
      hydra:property pp:addPrefLabel ;
      hydra:title "Add preferred label" ;
      hydra:readable false ;
      hydra:writable true ;
    ] ,
    [
      hydra:property pp:addAltLabel ;
      hydra:title "Add alternative label" ;
      hydra:readable false ;
      hydra:writable true ;
    ] ,
    [
      hydra:property pp:deleteAltLabel ;
      hydra:title "Delete alternative label" ;
      hydra:readable false ;
      hydra:writable true ;
    ] ;
.

pp:createConceptScheme a hydra:TemplatedLink , rdf:Property ;
  hydra:supportedOperation [
    a hydra:Operation ;
    hydra:method "POST" ;
    rdfs:label "Create New Concept Scheme" ;
    hydra:description "Creates a new concept scheme in the given project." ;
    # hydra:returns skos-api:conceptScheme-uri ;
    hydra:returns skos:ConceptScheme ;
    # e.g. like this:
    #{
    #  "@context" : {
    #    "skos" : "http://www.w3.org/2004/02/skos/core#",
    #    "skos-api" : "http://skos-api.org/metamodel#"
    #  },
    #  "@id" : "http://blabla.net/conceptscheme/123",
    #  "@type" : "skos:ConceptScheme" ,
    #  "skos-api:uri" : "http://blabla.net/conceptscheme/123"
    #}
    hydra-ext:returnShape [ 
      a sh:NodeShape ;
      sh:targetClass skos:ConceptScheme ;
      sh:property
        [ 
          sh:path rdf:type ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
          sh:hasValue skos:ConceptScheme ;
        ] ,
        [ 
          sh:path skos-api:uri ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
        ] ;
      sh:closed true 
    ] ;
    hydra-ext:addedDiff [ 
      a sh:NodeShape ;
      sh:targetClass skos:ConceptScheme ;
      sh:property
        [ 
          sh:path rdf:type ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
          sh:hasValue skos:ConceptScheme ;
        ] ,
        [ 
          sh:path skos-api:uri ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
        ] ,
        [
          sh:path skos-api:inProject ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
        ] ,
        [
          sh:path skos-api:title ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:Literal ;
        ] ,
        [
          sh:path skos-api:description ;
          sh:maxCount 1 ;
          sh:nodeKind sh:Literal ;
        ];
      # should this be a closed shape?
      sh:closed true 
    ] ;
    hydra:statusCodes
      [
        hydra:code "200" ;
        hydra:description "If the top concept was created."
      ] ,
      pp:BadRequest ;
  ] ;
.

pp:getConceptSchemes a hydra:TemplatedLink , rdf:Property ;
  hydra:supportedOperation [
    a hydra:Operation ;
    hydra:method "GET" ;
    rdfs:label "Get Concept Schemes" ;
    hydra:description "Returns a list of all concept schemes in the given project." ;
    hydra:returns hydra:Collection ;
    hydra-ext:returnShape [
      a sh:NodeShape ;
      sh:targetClass hydra:Collection ;
      sh:property
        [ 
          sh:path sh:member ;
          sh:node 
            [
              a sh:NodeShape ;
              sh:property [
              sh:path rdf:type ;
              sh:minCount 1 ;
              sh:maxCount 1 ;
              sh:nodeKind sh:IRI ;
              sh:hasValue skos:ConceptScheme ;
            ] ,
            [ 
              sh:path skos-api:uri ;
              sh:minCount 1 ;
              sh:maxCount 1 ;
              sh:nodeKind sh:IRI ;
            ] ,
            [
              sh:path skos-api:title ;
              sh:minCount 1 ;
              sh:maxCount 1 ;
              sh:nodeKind sh:Literal ;
            ]
          ]
        ] ;
    ] ;
    hydra:statusCodes 
      [
        hydra:code "200" ;
      ] ,
      pp:BadRequest ;
  ] ;
.

pp:getTopConcepts a hydra:TemplatedLink , rdf:Property ;
  hydra:supportedOperation [
    a hydra:Operation ;
    hydra:method "GET" ;
    rdfs:label "Get Top Concepts" ;
    hydra:description "Returns a list of direct top concepts for a concept scheme." ;
    hydra:returns hydra:Collection ;
    hydra-ext:returnShape [
      a hydra:Collection ;
      sh:targetClass hydra:Collection ;
      sh:property [ 
        sh:path sh:member ;
        sh:node pp:ConceptShape ;
      ] ;
    ] ;
    hydra:statusCodes 
      [
        hydra:code "200" ;
      ] ,
      pp:BadRequest ;
  ] ;
.

pp:getChildConcepts a hydra:TemplatedLink , rdf:Property ;
  hydra:supportedOperation [
    a hydra:Operation ;
    hydra:method "GET" ;
    rdfs:label "Get Child Concepts" ;
    hydra:description "Returns a list of narrower concepts of a given concept or concept scheme." ;
    hydra:returns hydra:Collection ;
    hydra-ext:returnShape [
      a hydra:Collection ;
      sh:targetClass hydra:Collection ;
      sh:property [ 
        sh:path sh:member ;
        sh:node pp:ConceptShape ;
      ] ;
    ] ;
    hydra:statusCodes 
      [
        hydra:code "200" ;
      ] ,
      pp:BadRequest ;
  ] ;
.

pp:createTopConcept a hydra:TemplatedLink , rdf:Property ;
  hydra:supportedOperation [
    a hydra:Operation ;
    hydra:method "POST" ;
    rdfs:label "Create New Top Concept" ;
    hydra:description "Creates a new SKOS top concept in your thesaurus." ;
    # hydra:returns skos-api:concept-uri ;
    hydra:returns skos:Concept ;
    # e.g. like this:
    #{
    #  "@context" : {
    #    "skos" : "http://www.w3.org/2004/02/skos/core#",
    #    "skos-api" : "http://skos-api.org/metamodel#"
    #  },
    #  "@id" : "http://blabla.net/concept/123",
    #  "@type" : "skos:Concept",
    #  "skos-api:uri" : "http://blabla.net/concept/123"
    #}
    hydra-ext:returnShape [ 
      a sh:NodeShape ;
      sh:targetClass skos:Concept ;
      sh:property
        [ 
          sh:path rdf:type ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
          sh:hasValue skos:Concept ;
        ],
        [ 
          sh:path skos-api:uri ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
        ] ;
      sh:closed true 
    ] ;
    hydra-ext:addedDiff [ 
      a sh:NodeShape ;
      sh:targetClass skos:Concept ;
      sh:property
        [ 
          sh:path rdf:type ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
          sh:hasValue skos:Concept ;
        ] ,
        [ 
          sh:path skos-api:uri ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
        ] ,
        [
          sh:path skos:topConceptOf ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
        ] ,
        # is this necessary to add?
        [
          sh:inversePath skos:hasTopConcept ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
        ];
      sh:closed true 
    ] ;
    hydra:statusCodes 
      [
        hydra:code "200" ;
        hydra:description "If the top concept was created."
      ] ,
      pp:BadRequest ;
  ] ;
.

pp:createConcept a hydra:TemplatedLink , rdf:Property ;
  hydra:supportedOperation [
    a hydra:Operation ;
    hydra:method "POST" ;
    rdfs:label "Create New Concept" ;
    hydra:description "Creates a new SKOS concept in your thesaurus." ;
    hydra:returns skos:Concept ;
    hydra-ext:returnShape [ 
      a sh:NodeShape ;
      sh:targetClass skos:Concept ;
      sh:property
        [ 
          sh:path rdf:type ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
          sh:hasValue skos:Concept ;
        ],
        [ 
          sh:path skos-api:uri ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
        ] ;
      sh:closed true 
    ] ;
    hydra-ext:addedDiff [
      a sh:NodeShape ;
      sh:targetClass skos:Concept ;
      sh:property
        [ 
          sh:path rdf:type ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
          sh:hasValue skos:Concept ;
        ] ,
        [ 
          sh:path skos-api:uri ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
        ] ,
        [
          sh:path skos:topConceptOf ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
        ] ,
        # is this necessary to add?
        [
          sh:inversePath skos:hasTopConcept ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:nodeKind sh:IRI ;
        ];
      sh:closed true 
    ] ;
    hydra:statusCodes 
      [
        hydra:code "200" ;
        hydra:description "If the concept was created."
      ] ,
      pp:BadRequest ;
  ] ;
.

pp:getCompleteConcept a hydra:TemplatedLink , rdf:Property ;
  hydra:supportedOperation [
    a hydra:Operation ;
    hydra:method "GET" ;
    rdfs:label "Get complete concept" ;
    hydra:description "Get a complete SKOS concept representation." ;
    hydra:returns skos-api:Concept ;
    hydra:returnShape pp:ConceptShape ;
    hydra:statusCodes 
      [
        hydra:code "200" ;
        hydra:description "If the Concept was created."
      ] ,
      pp:BadRequest ;
  ] ;
.

pp:addPrefLabel a hydra:TemplatedLink , rdf:Property ;
  hydra:supportedOperation [
    a hydra:Operation ;
    hydra:method "POST" ;
    rdfs:label "Add prefLabel" ;
    hydra:description "Adds a preferred label to an existing SKOS concept." ;
    hydra-ext:addedDiff [ 
      a sh:NodeShape ;
      sh:targetClass skos:Concept ;
      sh:property [
        sh:path skos:prefLabel ;
        sh:nodeKind sh:Literal ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 1 ;
      ] ;
      # should this be a closed shape?
      sh:closed true 
    ] ;
    hydra:statusCodes 
      [
        hydra:code "200" ;
        hydra:description "If the addition was successful."
      ] ,
      pp:BadRequest ;
  ]
.

pp:addAltLabel a hydra:TemplatedLink , rdf:Property ;
  hydra:supportedOperation [
    a hydra:Operation ;
    hydra:method "POST" ;
    rdfs:label "Add altLabel" ;
    hydra:description "Adds an alternative label to an existing SKOS concept." ;
    hydra-ext:addedDiff [ 
      a sh:NodeShape ;
      sh:targetClass skos:Concept ;
      sh:property [
        sh:path skos:altLabel ;
        sh:nodeKind sh:Literal ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 1 ;
      ] ;
      # should this be a closed shape?
      sh:closed true 
    ] ;
    hydra:statusCodes 
      [
        hydra:code "200" ;
        hydra:description "If the addition was successful."
      ] ,
      pp:BadRequest ;
  ]
.

pp:deleteAltLabel a hydra:TemplatedLink , rdf:Property ;
  hydra:supportedOperation [
    a hydra:Operation ;
    hydra:method "POST" ;
    rdfs:label "Delete altLabel" ;
    hydra:description "Deletes an alternative label from an existing SKOS concept." ;
    hydra-ext:deletedDiff [ 
      a sh:NodeShape ;
      sh:targetClass skos:Concept ;
      sh:property [
        sh:path skos:altLabel ;
        sh:nodeKind sh:Literal ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 1 ;
      ] ;
      # should this be a closed shape?
      sh:closed true 
    ] ;
    hydra:statusCodes 
      [
        hydra:code "200" ;
        hydra:description "If the addition was successful."
      ] ,
      pp:BadRequest ;
  ]
.

# Reusable shapes

pp:ConceptShape a sh:NodeShape ;
  sh:targetClass skos-api:Concept ;
  sh:property
    [ 
      sh:path skos-api:uri ;
      sh:minCount 1 ;
      sh:maxCount 1 ;
      sh:nodeKind sh:IRI ;
    ] ,
    [
      sh:path skos-api:parent ;
      sh:nodeKind sh:IRI ;
      sh:maxCount 1 ;
    ] ,
    [
      sh:path skos:prefLabel ;
      sh:nodeKind sh:Literal ;
      sh:minCount 1 ;
      sh:maxCount 1 ;
      sh:minLength 1 ;
    ] ,
    [
      sh:path skos:altLabel ;
      sh:nodeKind sh:Literal ;
    ] ,
    [
      sh:path skos:hiddenLabel ;
      sh:nodeKind sh:Literal ;
    ] ,
    [
      sh:path skos:definition ;
      sh:nodeKind sh:Literal ;
    ] ,
    [
      sh:path skos:notation ;
      sh:nodeKind sh:Literal ;
    ] ,
    [
      sh:path skos:example ;
      sh:nodeKind sh:Literal ;
    ] ,
    [
      sh:path skos:scopeNote ;
      sh:nodeKind sh:Literal ;
    ] , 
    [
      sh:path skos:inScheme ;
      sh:nodeKind sh:IRI ;
      sh:minCount 1 ;
      sh:maxCount 1 ;
    ] ,
    [
      sh:path skos:topConceptOf ;
      sh:nodeKind sh:IRI ;
    ] ,
    [
      sh:path skos:broader ;
      sh:nodeKind sh:IRI ;
    ] ,
    [
      sh:path skos:narrower ;
      sh:nodeKind sh:IRI ;
    ] ,
    [
      sh:path skos:related ;
      sh:nodeKind sh:IRI ;
    ] ,
    [
      sh:path skos:exactMatch ;
      sh:nodeKind sh:IRI ;
    ] ,
    [
      sh:path skos:closeMatch ;
      sh:nodeKind sh:IRI ;
    ] ,
    [
      sh:path skos:broaderMatch ;
      sh:nodeKind sh:IRI ;
    ] ,
    [
      sh:path skos:narrowerMatch ;
      sh:nodeKind sh:IRI ;
    ] ,
    [
      sh:path skos:relatedMatch ;
      sh:nodeKind sh:IRI ;
    ] ;
.
